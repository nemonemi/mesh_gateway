type Query {
  authors: [ExistingAuthor!]!
  author(id: ID!): ExistingAuthor!
  authorPerhaps(id: ID!): ExistingAuthorResult!
}

interface AuthorModel {
  id: ID!
  name: String!
  type: AuthorType!
  created_at: DateTime
}

type ExistingAuthor implements AuthorModel {
  id: ID!
  name: String!
  type: AuthorType!
  created_at: DateTime
  registration_number: String
}

union ExistingAuthorResult = ExistingAuthor | AuthorDoesNotExistError

type AuthorDoesNotExistError {
  message: String!
}

type User {
  id: ID!
  first_name: String
  last_name: String
}

type AuthorType {
  id: ID!
  name: String!
  version: String
}

# Scalars
scalar DateTime
