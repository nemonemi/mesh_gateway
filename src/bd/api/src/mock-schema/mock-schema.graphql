type Query {
  authors: [ExistingAuthor!]!
  author(id: ID!): ExistingAuthorResult!
  authorPerhaps(id: ID!): ExistingAuthorResult!
}

type Mutation {
  uploadFile: UploadFile
  uploadFileWithUnion(value: String): UploadFileResult
}


union UploadFileResult = UploadFile | WrongFileTypeError
type UploadFile {
  fileID: ID!
}
type WrongFileTypeError {
  message: String!
}

type ExistingAuthor {
  id: ID!
  name: String!
}

union ExistingAuthorResult = ExistingAuthor | AuthorDoesNotExistError

type AuthorDoesNotExistError {
  message: String!
}

type AuthorType {
  id: ID!
  name: String!
  version: String
}

# Scalars
scalar DateTime
